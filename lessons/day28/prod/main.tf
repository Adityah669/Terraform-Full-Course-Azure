# Data source to get current Azure client configuration
data "azurerm_client_config" "current" {}

locals {
  resource_name_prefix = "${var.environment}-${random_string.suffix.result}"
  common_tags          = merge(var.tags, { Environment = var.environment })
  infra_nodes_rg_name  = "${var.kubernetes_cluster_name}-${var.environment}-nodes"
}

# Random String for Suffix
resource "random_string" "suffix" {
  length  = 6
  special = false
  upper   = false
}

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = "${var.resource_group_name}-${var.environment}"
  location = var.location
  tags     = local.common_tags
}

# Log Analytics Workspace for AKS monitoring
resource "azurerm_log_analytics_workspace" "main" {
  name                = "${var.kubernetes_cluster_name}-${var.environment}-logs"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  sku                 = "PerGB2018"
  retention_in_days   = 90
  tags                = local.common_tags
}

# The AKS nodes resource group (auto generated by AKS cluster)
data "azurerm_resource_group" "nodes" {
  name       = azurerm_kubernetes_cluster.main.node_resource_group
  depends_on = [azurerm_kubernetes_cluster.main]
}

# AKS cluster
resource "azurerm_kubernetes_cluster" "main" {
  name                = "${var.kubernetes_cluster_name}-${var.environment}"
  location            = var.location
  resource_group_name = azurerm_resource_group.main.name
  dns_prefix          = "${var.kubernetes_cluster_name}-${var.environment}"
  node_resource_group = local.infra_nodes_rg_name
  kubernetes_version  = var.kubernetes_version

  default_node_pool {
    name                        = "default"
    node_count                  = var.node_count
    os_disk_size_gb             = 30
    vm_size                     = var.vm_size
    temporary_name_for_rotation = "tmpdefault"
  }

  dynamic "linux_profile" {
    for_each = fileexists("~/.ssh/id_rsa_azure.pub") ? [1] : []
    content {
      admin_username = "azureuser"
      ssh_key {
        key_data = file("~/.ssh/id_rsa_azure.pub")
      }
    }
  }

  identity {
    type = "SystemAssigned"
  }

  azure_active_directory_role_based_access_control {
    tenant_id          = data.azurerm_client_config.current.tenant_id
    azure_rbac_enabled = true
  }

  oms_agent {
    log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id
  }

  key_vault_secrets_provider {
    secret_rotation_enabled = true
  }

  tags = local.common_tags
}

# Install ArgoCD using Kubernetes manifests
resource "kubernetes_namespace" "argocd" {
  metadata {
    name = var.argocd_namespace
  }
  depends_on = [azurerm_kubernetes_cluster.main]
}

# Install ArgoCD using Helm
resource "helm_release" "argocd" {
  name       = "argocd"
  repository = "https://argoproj.github.io/argo-helm"
  chart      = "argo-cd"
  namespace  = kubernetes_namespace.argocd.metadata[0].name
  version    = "5.51.6"

  set {
    name  = "server.service.type"
    value = "LoadBalancer"
  }

  set {
    name  = "server.service.loadBalancerSourceRanges"
    value = "{0.0.0.0/0}"
  }

  set {
    name  = "configs.params.server\\.insecure"
    value = "true"
  }

  set {
    name  = "server.extraArgs"
    value = "{--insecure}"
  }

  depends_on = [kubernetes_namespace.argocd]
}

# Create ArgoCD Application for Goal Tracker using null_resource
resource "null_resource" "goal_tracker_app" {
  triggers = {
    cluster_id   = azurerm_kubernetes_cluster.main.id
    argocd_ready = helm_release.argocd.status
  }

  provisioner "local-exec" {
    command = <<-EOT
      # Get AKS credentials
      az aks get-credentials --resource-group ${azurerm_resource_group.main.name} --name ${azurerm_kubernetes_cluster.main.name} --overwrite-existing
      
      # Wait for ArgoCD to be ready
      kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n ${var.argocd_namespace} --timeout=300s
      
      # Create the ArgoCD Application
      cat <<EOF | kubectl apply -f -
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: goal-tracker-${var.environment}
  namespace: ${var.argocd_namespace}
spec:
  project: default
  source:
    repoURL: ${var.gitops_repo_url}
    targetRevision: HEAD
    path: environments/${var.environment}
  destination:
    server: https://kubernetes.default.svc
    namespace: goal-tracker
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
EOF
    EOT
  }

  depends_on = [helm_release.argocd]
}
